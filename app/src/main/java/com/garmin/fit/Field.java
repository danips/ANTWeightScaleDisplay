////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2017 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 20.38Release
// Tag = production/akw/20.38.00-0-geccbce3
////////////////////////////////////////////////////////////////////////////////


package com.garmin.fit;

import java.util.ArrayList;

public class Field extends FieldBase {
   protected final String name;
   protected final int num;
   protected int type;
   protected final double scale;
   protected final double offset;
   protected final String units;
   protected final boolean isAccumulated;
   protected final ArrayList<FieldComponent> components;
   protected final ArrayList<SubField> subFields;

   private final Profile.Type profileType;

   public Field(final Field field) {
      super(field);
      if (field == null) {
         this.name = "unknown";
         this.num = Fit.FIELD_NUM_INVALID;
         this.type = 0;
         this.profileType = Profile.Type.ENUM;
         this.scale = 1;
         this.offset = 0;
         this.units = "";
         this.isAccumulated = false;
         this.values = new ArrayList<>();
         this.components = new ArrayList<>();
         this.subFields = new ArrayList<>();
         return;
      }

      this.name = field.name;
      this.num = field.num;
      this.type = field.type;
      this.profileType = field.profileType;
      this.scale = field.scale;
      this.offset = field.offset;
      this.units = field.units;
      this.isAccumulated = field.isAccumulated;
      this.components = field.components;
      this.subFields = field.subFields;
   }

   protected Field(String name, int num, int type, double scale, double offset, String units, boolean accumulated, Profile.Type profileType) {
      this.name = name;
      this.num = num;
      this.type = type;
      this.profileType = profileType;
      this.scale = scale;
      this.offset = offset;
      this.units = units;
      this.isAccumulated = accumulated;
      this.components = new ArrayList<>();
      this.subFields = new ArrayList<>();
   }

   public int getNum() {
      return num;
   }

   @Override
   public String getUnits() {
      return this.units;
   }

   @Override
   public int getType() {
      return this.type;
   }

   public Profile.Type getProfileType() {
      return this.profileType;
   }

   @Override
   protected double getOffset() {
      return offset;
   }

   @Override
   protected double getScale() {
      return scale;
   }

   @Override
   protected String getFieldName() {
      return name;
   }

   public boolean getIsAccumulated() {
      return this.isAccumulated;
   }

   @Override
   protected SubField getSubField(String subFieldName) {
      for (int i = 0; i < subFields.size(); i++) {
         if (subFields.get(i).name.equals(subFieldName))
            return subFields.get(i);
      }

      return null;
   }

   @Override
   protected SubField getSubField(int subFieldIndex) {
      if ((subFieldIndex >= 0) && (subFieldIndex < subFields.size()))
         return subFields.get(subFieldIndex);
      else
         return null;
   }
}
